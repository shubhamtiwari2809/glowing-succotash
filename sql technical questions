-- sql technical interview questions (spotify)

-- Q1: Find total active users each day

select
event_date,
count(distinct user_id) as no_of_users
from activity11
group by
event_date


-- Q2: Find total active users each week

select
DATEPART(week,event_date) as week_number,
count(distinct user_id) as number_of_users
from activity11
group by
DATEPART(week,event_date)


-- Q3: datewise total number of users who made the purchase same day they installed the app

select
activity11.event_date,
count(distinct df.user_id) as number_of_users
from activity11
left join 
(select
event_date,
user_id,
count(distinct event_name) as numbers
from activity11
group by
event_date,user_id
having
count(distinct event_name) = 2
) as df
on activity11.event_date = df.event_date
group by
activity11.event_date


-- Q4: percentage of paid users in india,usa and other countries should be tagged as others

select
country_tag as country,
cast(100.0 * sum(case when country_tag is not null then 1 else 0 end)/(select count(*) from activity11 where event_name = 'app-purchase') as int) as percentage_users
from
(
select
case when country in ('sl','pak') then 'others' else country end as country_tag
from activity11
where event_name = 'app-purchase'
) as df
group by
country_tag


-- stratascratch
-- easy 

-- Q1: write a query that calculates the highest salary found in marketing and engineering dpartments..output just absolute salary differences

/* 
select
(select
max(a.salary) 
from db_employee as a
join db_dept as b
on a.department_id = b.id
where b.department = 'marketing')
-
(select
max(a.salary) 
from db_employee as a
join db_dept as b
on a.department_id = b.id
where b.department = 'engineering'

Q2: We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. 
Find the current salary of each employee assuming that salaries increase each year. 
Output their id, first name, last name, department ID, and current salary. Order your list by employee ID in ascending order.

select
df.id,df.first_name,df.last_name,df.department_id,df.salary
from
(select
id,
first_name,
last_name,
department_id,
salary,
rank() over (partition by id order by salary desc) as rnk
from ms_employee_salary) as df
where df.rnk = 1
order by
df.id
)

-- or

select
id,first_name,last_name,department_id,max(salary) as current_salary
from ms_employee_salary
group by
id,first_name,last_name,department_id
order by
id



*/
